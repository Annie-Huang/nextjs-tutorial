Next.js Tutorial for Beginners (https://www.youtube.com/playlist?list=PL4cUxeGkcC9g9gP2onazU5-2M-AzA8eBw)
Styling (CSS, Sass, CSS-in-JS) – Learn Next.js
(- https://www.youtube.com/watch?v=2t6y-bDIe0Y&list=PL6bwFJ82M6FXjyBTVi6WSCWin8q_g_8RR&index=6
 - https://github.com/leerob/mastering-nextjs/tree/master/course/styling
 - https://github.com/leerob/mastering-nextjs/tree/master/course/styling)
State Management & More (Redux, React Context, TypeScript) – Learn Next.js
(- https://www.youtube.com/watch?v=MR43-gYVQbI&list=PL6bwFJ82M6FXjyBTVi6WSCWin8q_g_8RR&index=12
 - https://github.com/vercel/next.js/blob/canary/examples/with-redux/store.js
 - https://github.com/vercel/next.js/blob/canary/examples/with-context-api/pages/about.js
 - https://github.com/vercel/next.js/blob/canary/examples/with-context-api/components/Counter.js
 - https://github.com/vercel/next.js/tree/canary/examples/with-typescript)
Typescript:
(- https://nextjs.org/docs/basic-features/typescript
 - https://github.com/vercel/next.js/tree/canary/examples/with-typescript)
Redirect:
(- https://nextjs.org/docs/api-reference/next.config.js/redirects)
ReWrite:
(- https://nextjs.org/docs/api-reference/next.config.js/rewrites)
Absolute Imports and Module path aliases:
(- https://nextjs.org/docs/advanced-features/module-path-aliases)

https://github.com/iamshaunjp/nextjs-tutorial/tree/lesson-1
https://github.com/Annie-Huang/nextjs-tutorial

https://jsonplaceholder.typicode.com/
https://jsonplaceholder.typicode.com/users

----------------

Up to:
Next.js Tutorial #13 - Fetching a Single Item
https://www.youtube.com/watch?v=2zRHlqc0_yw&list=PL4cUxeGkcC9g9gP2onazU5-2M-AzA8eBw&index=13

====================================================================================================

CCS Module:
- can encapsulate each file use their own style file.
- devtool can see file name and class name under 'class' tag
- Cannot do nesting, need to write css style, e.g.
    .title a:hover,
    .title a:focus,
    .title a:active {..}
- Can only use pure selectors, meaning must contain at least one local class or id. Cannot select element
  (seriously? really??)

Styling (CSS, Sass, CSS-in-JS) – Learn Next.js (https://www.youtube.com/watch?v=2t6y-bDIe0Y&list=PL6bwFJ82M6FXjyBTVi6WSCWin8q_g_8RR&index=6)
https://github.com/leerob/mastering-nextjs/tree/master/course/styling

SCSS:
- In next.config.js:
  const withSass = require('@zeit/next-sass');
  module.exports.withSass();

styled-jsx:
- This is invented by next.js team, only next.js use this styling method.
  <style jsx>{`
    .title{...}
    .title:hover {...}
  `}</style>

styled-components
- https://github.com/leerob/mastering-nextjs/tree/master/course/styling/04-styled-components
- During the compilation process, style components takes care of Auto prefixing all of the vendor styles for this component.
  e.g. display: flex --> display: -webkit-flex
- The class in devtool will have filename+ElementName+hash
.babelrc:
{
    "presets": ["next/babel"],
    "plugins": [
        "inline-react-svg",
        [
            "styled-components",
            {
                "displayName": true,
                "preprocess": false,
                "ssr": true
            }
        ]
    ]
}
_document.js
import Document from 'next/document';
import {ServerStyleSheet} from 'styled-components';
export default class MyDocument extends Document {
    static async getInitialProps(ctx) {
        const sheet = new ServerStyleSheet();
        const originalRenderPage = ctx.renderPage;
        try {
            ctx.renderPage = () =>
                originalRenderPage({
                    enhanceApp: (App) => (props) => sheet.collectStyles(<App {...props} />)
                });
            const initialProps = await Document.getInitialProps(ctx);
            return {
                ...initialProps,
                styles: (
                    <>
                        {initialProps.styles}
                        {sheet.getStyleElement()}
                    </>
                )
            };
        } finally {
            sheet.seal();
        }
    }
}
====================================================================================================

redux:
- https://github.com/vercel/next.js/blob/canary/examples/with-redux/store.js
- Store with initial state ops your application out of using static pre-rendering.
  e.g. if two of your pages use redux and maybe five others are marketing pages and they don't need to,
  they're effectively not going to be able to compile down to a static site and that's not great and we want
  to get around it. The new way to use Redux with Next is:
  - export default withRedux(IndexPage)     << use redux. Use in page level, but don't use it in component level and don't use it in _app.js.
  - Need functionality rendering out to a static site: Dispatched in client side and get your own componentDidMount instead of getInitialProps
- Has some very nice dev tools that can do a lot of really robust functionality.
  - You can trace your state updates.
  - You can have a bunch of pre baked middleware just pull off the shell from NPM that allows you to add more logic on top of your state management solution.
  - Cannot do it as easily with react context
- Overall recommendation is not to use redux.

react context API:
- https://github.com/vercel/next.js/blob/canary/examples/with-context-api/pages/about.js
  https://github.com/vercel/next.js/blob/canary/examples/with-context-api/components/Counter.js
- You can wrap specific components with a context provider and you don't have to do it at a page level like you do with the withRedux higher-order component.
- Can do with page component or component component.
- React context, the useContext hook, the useReducer hook, and changing your model about how you build these applications and share
  state will probably work fro most people up to a point and when you get to that point then it might be worth evaluating whether
  you need to use a more robust library like redux

====================================================================================================

typescript:
- https://nextjs.org/docs/basic-features/typescript
  https://github.com/vercel/next.js/tree/canary/examples/with-typescript
- package.json: add:
  - "typescript": "4.0" | "@types/react": "^17.0.2",
- Then when you run the app for the first time, the create-next-app will automatically create tsconfig.json
- next-env.d.ts file were to ensure the next.js are picked up by the typescript file. Don't delete this file. Just leave it
  and it will allow ou to have access next.js specific types

====================================================================================================

Absolute Imports and Module path aliases:
// tsconfig.json or jsconfig.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["components/*"]
    }
  }
}

// pages/index.js
import Button from '@/components/button'

====================================================================================================

C:\react>npx create-next-app nextjs-tutorial
C:\react\nextjs-tutorial>npm run dev

C:\react\nextjs-tutorial>npm run build
    << Open up C:\react\nextjs-tutorial\.next\server\pages\ninjas\ folder and you can see all the 1-10.html files are there

http://localhost:3000
http://localhost:3000/about
http://localhost:3000/ninjas/test
http://localhost:3000/ninjas
http://localhost:3000/abd       << 404 page. \pages\404.js is the special file (have to use this name) you can create for link not exist..

http://localhost:3000/ninjas/id
http://localhost:3000/ninjas/1
http://localhost:3000/ninjas/2
http://localhost:3000/ninjas/25


<Image> from 'next/image' can lazily loads the image.
E.g. if your image is not in the current view point and you need to scroll down to see.
the image will only be loaded when it's in the view point (optimize loading speed).


Next.js Tutorial #1 - Introduction & Setup
Next.js Tutorial #2 - Pages & Routes
Next.js Tutorial #3 - Adding Other Components
Next.js Tutorial #4 - Linking Between Pages
Next.js Tutorial #5 - Creating a Layout Component
Next.js Tutorial #6 - Adding Styles
Next.js Tutorial #7 - Custom 404 Page
Next.js Tutorial #8 - Redirecting Users
Next.js Tutorial #9 - Images & Metadata
Next.js Tutorial #10 - Fetching Data (getStaticProps)
Next.js Tutorial #11 - Dynamic Routes (part 1)
Next.js Tutorial #12 - Dynamic Routes (part 2 - getStaticPaths)
Next.js Tutorial #13 - Fetching a Single Item
Next.js Tutorial #14 - Deploying to Vercel

------------------

Lecture notes:

What is Next.js?
Framework for creating pre-rendering React websites
Offers us both Server Side Rendering & Static Site Generation (SSR) & (SSG)
- Server-side rendering is when react components are rendered into html pages on the server after a page request comes from the browser
- Static site generation is when components are rendered into html pages at build time so that we can just deploy the web pages and javascript bundles to the web
Next.js allow us to easily do both of these things meaning that our react components are already rendered into html pages by the time
they reach the browser
In contract to this with Next, react renders components in the browser instead and this is known as client-side rendering

====================================================================================================


getStaticPaths + getStaticProps:

export const getStaticPaths = async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/users');
  const data = await res.json();

  const paths = data.map((ninja) => {
    return {
      params: { id: ninja.id.toString() },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

/*
   Next is going to run this function for every ninja details page that we need to generate
   and it bases that on this paths thing line 14. So if we return 10 objects with 10 different ids
   in this path property, it will run this function (getStaticPaths) essentially 10 times
   so we can make 10 different fetch requests for different items. Now we get access to the parameter we need each time around on a context object
   that we automatically accept as an argument in this function so the id of each item we need to get is going to be attached
   to this context object so const id is equal to context.param.id
 */
export const getStaticPaths = async (context) => {
  const id = context.params.id;
  const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);
  const data = await res.json();

  return {
    props: { ninjas: data },
  };
};
